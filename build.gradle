buildscript {
    repositories {
        gradlePluginPortal()
    }

    dependencies {
        classpath 'com.bmuschko:gradle-izpack-plugin:3.2'
    }
}



plugins {
	id 'java'
	id 'eclipse'
	id 'com.bmuschko.izpack' version '3.2'
	id "de.undercouch.download" version "4.1.2"
}

ext {
    downloadFolder = file("${buildDir}/downloads")
    jreBundleVersion="11.0.12+7"
    jreBundleEscapedVersion=jreBundleVersion.replaceAll('\\+','_')
    openJFXVersion="17.0.1"
}

eclipse {
    classpath {
        downloadJavadoc = true
        downloadSources = true
    }
}

repositories {
    jcenter()
}

sourceCompatibility = 11
targetCompatibility = 11

configurations {
  izpackUtils {
    transitive = false
  }
}
dependencies {
    izpack 'org.bidib.org.codehaus.izpack:izpack-ant:5.2.0.M2'
    izpackUtils 'org.bidib.org.codehaus.izpack:izpack-wrapper:5.2.0.M2'
    compileOnly 'org.bidib.org.codehaus.izpack:izpack-compiler:5.2.0.M2'
}

izpack {
    baseDir = file("${buildDir}/resources/main")
    installFile = file("${buildDir}/resources/main/install.xml")
    outputFile = file("${buildDir}/distributions/iep-node-installer.jar")
    compression = 'default'
    compressionLevel = 9
    appProperties = ["iep.node.path": file("../iep-node"), 'iep.target.os' : 'windows']
}

task unpackSharedLibs(dependsOn: jar, type: Copy) {
    def outputDir = file("${buildDir}/izpack-utils")
    from zipTree(configurations.izpackUtils.singleFile)
    into outputDir
}


task izPackCreateInstallerTrigger(dependsOn: unpackSharedLibs) {
	inputs.file file("../iep-node/build/iep-node.zip")
}

izPackCreateInstaller.dependsOn izPackCreateInstallerTrigger



task downloadLinuxLibs(dependsOn: izPackCreateInstaller, type: Download) {
	downloadFolder.mkdirs()
	

    src([
        "https://phoenixnap.dl.sourceforge.net/project/dos2unix/dos2unix/7.3.3/dos2unix-7.3.3.tar.gz",
        "https://github.com/adoptium/temurin11-binaries/releases/download/jdk-${jreBundleVersion}/OpenJDK11U-jre_x64_linux_hotspot_${jreBundleEscapedVersion}.tar.gz",
        "https://download2.gluonhq.com/openjfx/${openJFXVersion}/openjfx-${openJFXVersion}_linux-x64_bin-sdk.zip"
    ])

    dest downloadFolder
    overwrite false
}



/*task unpackLinuxLibs(dependsOn: downloadLinuxLibs, type: Copy) {
	fileTree(dir: "${buildDir}/downloads").include('*.tar.gz').each { tarFile ->
	   copy {
	      println "Untar $tarFile.name"
	      def name = tarFile.name - '.tar.gz'
	      from tarTree("${buildDir}/downloads/${tarFile.name}")
	      into "${buildDir}/downloads"       
	   }
	}
}*/

task downloadMacLibs(dependsOn: izPackCreateInstaller, type: Download) {
	downloadFolder.mkdirs()
    src([
        "https://github.com/adoptium/temurin11-binaries/releases/download/jdk-${jreBundleVersion}/OpenJDK11U-jre_x64_mac_hotspot_${jreBundleEscapedVersion}.tar.gz",
        "https://download2.gluonhq.com/openjfx/${openJFXVersion}/openjfx-${openJFXVersion}_osx-x64_bin-sdk.zip"
    ])
    dest downloadFolder
    overwrite false
} 

task downloadWindowsLibs(dependsOn: izPackCreateInstaller, type: Download) {
	downloadFolder.mkdirs()
    src([
        "https://github.com/adoptium/temurin11-binaries/releases/download/jdk-${jreBundleVersion}/OpenJDK11U-jre_x64_windows_hotspot_${jreBundleEscapedVersion}.zip",
        "https://github.com/winsw/winsw/releases/download/v2.11.0/WinSW-x64.exe",
        "https://download2.gluonhq.com/openjfx/${openJFXVersion}/openjfx-${openJFXVersion}_windows-x64_bin-sdk.zip"
    ])
    dest downloadFolder
    overwrite false
} 

task unzipWindowsLibs(dependsOn: downloadWindowsLibs, type: Copy) {
  delete "${buildDir}/downloads/OpenJDK11U-jre_x64_windows_hotspot_${jreBundleEscapedVersion}"
  from zipTree("${buildDir}/downloads/OpenJDK11U-jre_x64_windows_hotspot_${jreBundleEscapedVersion}.zip")
  into "${buildDir}/downloads"
}


task createMacInstaller(dependsOn: downloadMacLibs) {
  doLast {
     exec {
     	  workingDir "${buildDir}/resources/main"
          executable "${buildDir}/resources/main/create-mac-pkg.sh"
      }
  }
}

task createLinuxInstaller(dependsOn: downloadLinuxLibs) {
  doLast {
     exec {
     	  workingDir "${buildDir}/resources/main"
          executable "${buildDir}/resources/main/create-linux-pkg.sh"
      }
  }
}

task createWindowsInstaller(dependsOn: unzipWindowsLibs) {
  doLast {
     exec {
          workingDir "${buildDir}/resources/main"
          executable "${buildDir}/resources/main/create-windows-pkg.sh"
      }
  }
}

task createInstallers(dependsOn: ['createMacInstaller', 'createLinuxInstaller', 'createWindowsInstaller']) {

}
