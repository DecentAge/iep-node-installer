stages:
  - prepare
  - build
  - release

variables:
  RELEASE_NAME: "Lithium"

download-artifacts:
  stage: prepare
  script:
    - echo "CI_COMMIT_REF_NAME=${CI_COMMIT_REF_NAME}"
  needs:
    - project: infinity-economics/iep-node
      ref: ${CI_COMMIT_REF_NAME}
      job: prepare-iep-node-artifacts
      artifacts: true
  artifacts:
    paths:
      - iep-node-artifacts

build-windows:
  image: adoptopenjdk/openjdk11:alpine-slim
  stage: build
  before_script:
    - |
      apk add --update --quiet --no-cache bash python3 py3-pip
  script:
    - |
      ./create-win-installer.sh ${PWD}/iep-node-artifacts
  artifacts:
    paths:
      - ./build/distributions/iep-node-installer.exe
  cache:
    key: windows_downloads
    paths:
      - downloads/
  tags:
    - ci-cd

build-linux:
  image: adoptopenjdk/openjdk11:alpine-slim
  stage: build
  before_script:
    - |
      apk add --update --quiet --no-cache bash
  script:
    - |
      ./create-linux-installer.sh ${PWD}/iep-node-artifacts
  artifacts:
    paths:
      - ./build/distributions/iep-node-installer.run
  cache:
    key: linux_downloads
    paths:
      - downloads/
  tags:
    - ci-cd

build-mac:
  image: adoptopenjdk/openjdk11:alpine-slim
  stage: build
  before_script:
    - |
      apk add --update --quiet --no-cache bash
  script:
    - |
      ./create-mac-installer.sh ${PWD}/iep-node-artifacts
  artifacts:
    paths:
      - ./build/distributions/iep-node-installer.tar.gz
  cache:
    key: mac_downloads
    paths:
      - downloads/
  tags:
    - ci-cd

create-github-release:
  stage: release
  image: alpine:3.13
  before_script:
    - |
      GH_VERSION=1.14.0
      apk add --no-cache --quiet git wget rsync curl && \
      wget --quiet https://github.com/cli/cli/releases/download/v${GH_VERSION}/gh_${GH_VERSION}_linux_amd64.tar.gz && \
      tar -zxf gh_${GH_VERSION}_linux_amd64.tar.gz && \
      chmod +x gh_${GH_VERSION}_linux_amd64/bin/gh && \
      rsync -az --remove-source-files gh_${GH_VERSION}_linux_amd64/bin/ /usr/bin
  script:
    - |
      RELEASE_VERSION=$(cat release-version.txt)
      gh --version

      export GH_REPO=github.com/DecentAge/${CI_PROJECT_NAME}
      export GITHUB_TOKEN="${GITHUB_TOKEN}"

      gh config set prompt disabled	
      echo "Deleting release ${RELEASE_VERSION}"
      gh release delete ${RELEASE_VERSION} || echo "Could not delete release ${RELEASE_VERSION}"

      #echo "Deleting tag ${RELEASE_VERSION}"
      #curl --request DELETE --header "PRIVATE-TOKEN: $WRITE_API_PAT" "${CI_API_V4_URL}/progithub publishjects/${CI_PROJECT_ID}/tags/${RELEASE_VERSION}" || "Could not delete tag ${RELEASE_VERSION}"

      echo "Waiting 4 seconds to sync GitLab -> Github"
      sleep 4	  
   
      echo "Creating release ${RELEASE_VERSION}"
      RELEASE_DESCRIPTION_PATH=${PWD}/iep-node-artifacts/CHANGELOG-${RELEASE_VERSION}.md
      gh release create $RELEASE_VERSION --target $CI_COMMIT_REF_NAME --title "$RELEASE_VERSION ($RELEASE_NAME)" --notes-file ${RELEASE_DESCRIPTION_PATH}

      upload_release_file() {
        local file_path=$1
        local file_label=$2
        echo "Uploading ${file_path}"
        gh release upload $RELEASE_VERSION "${file_path}#${file_label}"  --clobber || "Echo couldn't upload ${file_path} for release ${RELEASE_VERSION}"
      }

      upload_release_file ./build/distributions/iep-node-installer.exe "Windows (x64)"
      upload_release_file ./build/distributions/iep-node-installer.run "Linux (x64)"
      upload_release_file ./build/distributions/iep-node-installer.tar.gz "MacOS (x64)"
  when: manual
  tags:
    - ci-cd


create-gitlab-release:
  stage: release
  image: registry.gitlab.com/gitlab-org/release-cli:latest
  before_script:
    - apk add --update --no-cache curl jq
  script:
    - |
      RELEASE_VERSION=$(cat release-version.txt)
      echo ""
      echo "Deleting release ${RELEASE_VERSION}"
      curl --request DELETE --header "PRIVATE-TOKEN: $WRITE_API_PAT" "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/releases/${RELEASE_VERSION}" || "Could not delete release ${RELEASE_VERSION}"
     
      echo "Deleting tag ${RELEASE_VERSION} if not already deleted ${RELEASE_VERSION}"
      curl --request DELETE --header "PRIVATE-TOKEN: $WRITE_API_PAT" "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/tags/${RELEASE_VERSION}" || "Could not delete tag ${RELEASE_VERSION}"

      echo "Uploading build/$RELEASE_DOCKER_IMAGE_FILE_NAME ${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/iep-node-installer/${RELEASE_VERSION}/iep-node-installer.exe"
      curl --header "JOB-TOKEN: $CI_JOB_TOKEN" --upload-file ./build/distributions/iep-node-installer.exe ${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/iep-node-installer/${RELEASE_VERSION}/iep-node-installer.exe
      
      echo "Uploading build/$RELEASE_PACKAGE_FILE_NAME ${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/iep-node-installer/${RELEASE_VERSION}/iep-node-installer.run"
      curl --header "JOB-TOKEN: $CI_JOB_TOKEN" --upload-file ./build/distributions/iep-node-installer.run ${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/iep-node-installer/${RELEASE_VERSION}/iep-node-installer.run

      echo "Uploading build/$RELEASE_PACKAGE_FILE_NAME ${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/iep-node-installer/${RELEASE_VERSION}/iep-node-installer.tar.gz"
      curl --header "JOB-TOKEN: $CI_JOB_TOKEN" --upload-file ./build/distributions/iep-node-installer.tar.gz ${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/iep-node-installer/${RELEASE_VERSION}/iep-node-installer.tar.gz
            
      echo ""      
      echo "Creating release ${RELEASE_VERSION}"
  release:
    name: "$RELEASE_VERSION ($RELEASE_NAME)"
    description: "$RELEASE_DESCRIPTION_PATH"
    tag_name: "$RELEASE_VERSION"
#    milestones:
#      - "$RELEASE_VERSION ($RELEASE_NAME) ${CI_PROJECT_ID}"
    assets:
      links:
        - name: "Windows (x64)"
          url: "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/iep-node-installer/${RELEASE_VERSION}/iep-node-installer.exe"
          link_type: "package"
        - name: "Linux (x64)"
          url: "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/iep-node-installer/${RELEASE_VERSION}/iep-node-installer.run"
          link_type: "package"
        - name: "MacOS (x64)"
          url: "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/iep-node-installer/${RELEASE_VERSION}/iep-node-installer.tar.gz"
          link_type: "package"
  when: manual
  tags:
    - ci-cd
