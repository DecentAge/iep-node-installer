stages:
  - prepare
  - build
  - release

variables:
  RELEASE_NAME: "Lithium"
  RELEASE_DESCRIPTION_PATH: "./CHANGELOG.md"

download-artifacts:
  stage: prepare
  script:
    - echo "CI_COMMIT_REF_NAME=${CI_COMMIT_REF_NAME}"
    - ls -alt iep-node-artifacts
    ls -alt downloads
  needs:
    - project: infinity-economics/iep-node
      ref: ${CI_COMMIT_REF_NAME}
      job: prepare-iep-node-artifacts
      artifacts: true
  artifacts:
    paths:
      - iep-node-artifacts

build-windows:
  image: adoptopenjdk/openjdk11:alpine-slim
  stage: build
  before_script:
    - |
      apk add --update --no-cache bash python3 py3-pip
  script:
    - |
      ls -alt ${PWD}/iep-node-artifacts
      ./create-win-installer.sh ${PWD}/iep-node-artifacts
  artifacts:
    paths:
      - ./build/distributions/iep-installer-node.exe
  cache:
    key: windows_downloads
    paths:
      - downloads/
  tags:
    - ci-cd

build-linux:
  image: adoptopenjdk/openjdk11:alpine-slim
  stage: build
  before_script:
    - |
      apk add --update --no-cache bash
  script:
    - |
      ./create-linux-installer.sh ${PWD}/iep-node-artifacts
  artifacts:
    paths:
      - ./build/distributions/iep-node-installer.run
  cache:
    key: linux_downloads
    paths:
      - downloads/
  tags:
    - ci-cd

build-mac:
  image: adoptopenjdk/openjdk11:alpine-slim
  stage: build
  before_script:
    - |
      apk add --update --no-cache bash
  script:
    - |
      ./create-mac-installer.sh ${PWD}/iep-node-artifacts
  artifacts:
    paths:
      - ./build/distributions/iep-node-installer.app
  cache:
    key: mac_downloads
    paths:
      - downloads/
  tags:
    - ci-cd

create-github-release:
  stage: release
  image: alpine:3.13
  before_script:
    - |
      GH_VERSION=1.14.0
      apk add --no-cache git wget rsync curl && \
      wget --quiet https://github.com/cli/cli/releases/download/v${GH_VERSION}/gh_${GH_VERSION}_linux_amd64.tar.gz && \
      tar -zxvf gh_${GH_VERSION}_linux_amd64.tar.gz && \
      chmod +x gh_${GH_VERSION}_linux_amd64/bin/gh && \
      rsync -az --remove-source-files gh_${GH_VERSION}_linux_amd64/bin/ /usr/bin
  script:
    - |
      RELEASE_VERSION=$(cat release-version.txt)
      gh --version

      export GH_REPO=github.com/DecentAge/${CI_PROJECT_NAME}
      export GITHUB_TOKEN="123456"

      gh config set prompt disabled	
      echo "Deleting release ${RELEASE_VERSION}"
      gh release delete ${RELEASE_VERSION} || echo "Could not delete release ${RELEASE_VERSION}"

      #echo "Deleting tag ${RELEASE_VERSION}"
      #curl --request DELETE --header "PRIVATE-TOKEN: $WRITE_API_PAT" "${CI_API_V4_URL}/progithub publishjects/${CI_PROJECT_ID}/tags/${RELEASE_VERSION}" || "Could not delete tag ${RELEASE_VERSION}"

      #echo "Waiting 8 seconds to sync GitLab -> Github"
      #sleep 8	  
   
      echo "Creating release ${RELEASE_VERSION}"
      gh release create $RELEASE_VERSION --target master --title "$RELEASE_VERSION ($RELEASE_NAME)" --notes-file ${RELEASE_DESCRIPTION_PATH}

      #upload_file {
      #  local file_path=$1
      #  echo "Uploading ${file_path}"
      #  gh release upload $RELEASE_VERSION ${file_path} --clobber || "Echo couldn't upload $RELEASE_VERSION ${file_path}"
      #}

      #upload_file ./build/distributions/iep-node-installer.app
